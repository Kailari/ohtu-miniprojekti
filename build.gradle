plugins {
    id 'java'
    id 'application'
}

application {
    mainClassName = 'winkkari.main.Main'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spark
    implementation "com.sparkjava:spark-core:${sparkVersion}"

    // Thymeleaf
    implementation "com.sparkjava:spark-template-thymeleaf:${thymeleafVersion}"

    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"

    // JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${jUnitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jUnitVersion}"

    // Mockito
    testCompileOnly "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJUnitVersion}"

    // Cucumber
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"

    // Selenium + Fluentlenium
    testImplementation "org.fluentlenium:fluentlenium-core:${fluentleniumVersion}"
    testImplementation "org.fluentlenium:fluentlenium-assertj:${fluentleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-api:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:htmlunit-driver:2.33.0"

    // Database
    //compile group: "com.h2database", name: "h2", version: "1.3.148"
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.8'
}

task stage {
  dependsOn installDist
}

test {
    environment "ENV", "test"
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        stackTraceFilters = []
    }
}

jar {
    manifest {
        attributes "Main-Class": "${application.mainClassName}"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
